---
title: "Relatório BI"
date: "`r Sys.Date()`"
author: 20211143, 20211139, 20211131, 20211115, 20181082
output:
  rmdformats::robobook:
    code_folding: show
    toc: 3
    thumbnails: false
    lightbox: true
    gallery: false
    cache: false
    highlight: kate
    fig_width: 3
    fig_height: 2
---

```{r config, include=FALSE}
# bibliotecas --- modificar sempre que acrescentar uma biblioteca
bibliotecas <- c("knitr", "rmdformats", "lubridate", "ggplot2","dplyr", "DT", "gt",
                 "flextable", "plotly", "gganimate", "forcats", "scaçes") 

for (bibl in bibliotecas) {
        library(bibl, character.only = TRUE)
}
rm(bibl, bibliotecas)

# knit: opções globais --- não modificar!
options(max.print="80")
opts_chunk$set(echo=FALSE,
	           cache=FALSE,
               prompt=FALSE,
               tidy=TRUE,
               comment=NA,
               message=FALSE,
               warning=TRUE)
opts_knit$set(width=80)
```

## Autores

-   Turma: T61
-   Grupo: G02/T61
-   Autores
    -   20181082 Gonçalo Colaço
    -   20211143 Inês Bento
    -   20211131 Miguel Morgado
    -   20211139 Patrícia Ruivo
    -   20211115 Samuel Olo
  

## Introdução

Neste relatório, foram analisados dados da empresa relativos ao período, entre 01-07-2016 e 31-07-2019. O tipo de produtos que empresa vende, o custo dos produtos, custo de envio, os produtos mais vendidos, entre outros parâmetros. 

```{r data_loading, include=FALSE}

data_files <- c("calendar.Rda", "customers.Rda", "productCategory.Rda",
                "products.Rda", "productSubCategory.Rda","territory.Rda",
                "factSales.Rda")
for (dfiles in data_files) {
    load(dfiles)
    }
rm(dfiles, data_files)


facts_dims <- factSales |>
    merge(calendar, by.x = "OrderDate", by.y = "Date") |>
    merge(customers, by = "CustomerKey") |>
    merge(territory, by.x = "SalesTerritoryKey", 
          by.y = "Territory Key") |>
    merge(products, by = "ProductKey")

save(facts_dims, file = "facts_dims.Rda")
load("facts_dims.Rda")

```


## Marketing

### Ocupação dos nossos clientes

**Ocupação dos nossos clientes**

```{r fig.height=5, fig.width=7}
occupation_counts <- table(facts_dims$Occupation)
occupation_df <- data.frame(Occupation = names(occupation_counts),
                            Count = as.numeric(occupation_counts))
occupation_df <- occupation_df[order(occupation_df$Count), ]
occupation_df$Count <- round(occupation_df$Count / 1000, 1)

ggplot(occupation_df, aes(x = Occupation, y = Count)) +
    geom_segment(aes(x = Occupation, xend = Occupation, y = 0, yend = Count), color = "skyblue") +
    geom_point(color = "#0080ff", size = 3) +
    geom_text(aes(label = Count), vjust = -1.5, size = 3) +
    coord_flip() +  
    labs(title = "Distribuição de Ocupação dos Clientes",
         x = "Ocupação",
         y = "Número (em milhares)") +
    theme_minimal()

```


O gráfico mostra a distribuição das ocupações dos clientes, representando o número de clientes em cada ocupação. Observa-se que a maioria dos clientes possui ocupações profissionais, enquanto uma minoria está distribuída em ocupações manuais. A análise revela uma diversidade considerável nas ocupações dos clientes da empresa.



**Distribuição dos nossos clientes por género**
```{r fig.height=5, fig.width=7}
numero_clientes_masculinos <- sum(grepl("M", facts_dims$Gender))
numero_clientes_femininos <- sum(grepl("F", facts_dims$Gender))
percentual_masculino <- round((numero_clientes_masculinos / sum(c(numero_clientes_masculinos, numero_clientes_femininos))) * 100, 1)
percentual_feminino <- round((numero_clientes_femininos / sum(c(numero_clientes_masculinos, numero_clientes_femininos))) * 100, 1)
pie(c(numero_clientes_masculinos, numero_clientes_femininos),
    labels = c(paste("Masculino", percentual_masculino, "%"), paste("Feminino", percentual_feminino, "%")),
    col = c("#0080ff", "#f9638f"))  
legend("topright", legend = c("Masculino", "Feminino"), fill = c("#0080ff", "#f9638f"))
title(main = "Distribuição de Género dos Clientes")

```


O gráfico pie ilustra a distribuição de género dos clientes da empresa. Observa-se que a maioria dos clientes é do sexo masculino, representando aproximadamente 50.3% do total, enquanto os clientes do sexo feminino compõem cerca de 49.7%, sendo que a distribuição é quase homogéna.



**Número de filhos dos nossos clientes**
```{r fig.height=5, fig.width=7}

children_counts <- table(facts_dims$NumberChildrenAtHome)
children_df <- data.frame(ChildrenCount = as.integer(names(children_counts)),
                          Count = as.integer(children_counts))
children_df <- children_df[order(children_df$ChildrenCount), ]
children_df$Count <- round(children_df$Count / 1000, 1)
ggplot(children_df, aes(x = factor(ChildrenCount), y = Count)) +
    geom_segment(aes(x = factor(ChildrenCount), xend = factor(ChildrenCount), y = 0, yend = Count), color = "skyblue") +
    geom_text(aes(label = Count), vjust = -1, size = 3) +  
    labs(title = "Número de Filhos por Casa",
         x = "Número de Filhos",
         y = "Número (em milhares)") +
         theme_minimal()
```


O gráfico mostra o número de filhos por casa entre os clientes da empresa. É possível verificar uma distribuição, onde a maioria dos clientes não possui filhos em casa. No entanto, uma parcela significativa possui um ou dois filhos, enquanto o número de clientes com três ou mais filhos diminui consideravelmente.




**Distribuição do rendimento dos nossos clientes consoante a faixa etária**
```{r fig.height=5, fig.width=7}
facts_dims$BirthDate <- as.Date(facts_dims$BirthDate)
facts_dims$Age <- as.numeric(difftime(Sys.Date(), facts_dims$BirthDate, units = "days") / 365)
facts_dims$Age_Group <- cut(facts_dims$Age, breaks = seq(20, 100, by = 10),
                            labels = paste(seq(20, 90, by = 10), seq(29, 99, by = 10), sep = "-"))
income_by_age <- facts_dims %>%
    group_by(Age_Group) %>%
    summarise(Average_Income = mean(YearlyIncome, na.rm = TRUE))
ggplot(income_by_age, aes(x = Age_Group, y = Average_Income)) +
    geom_point() +
    geom_text(aes(label = scales::comma(Average_Income), y = Average_Income), vjust = -0.5, size = 3) +
    scale_y_continuous(labels = scales::comma_format(scale = 1/1000)) +
    labs(x = "Faixa Etária", y = "Rendimento Anual Médio (em milhares)") +
    ggtitle("Rendimento Anual Médio por Faixa Etária")
```


O gráfico apresenta o rendimento anual médio por faixa etária dos clientes da empresa. Nota-se que, de maneira geral, o rendimento tende a aumentar com o avanço da idade até uma certa faixa etária, após a qual começa a diminuir. Esta análise pode ajudar a empresa a entender melhor o perfil económico dos seus clientes em diferentes faixas etárias.


**Número de encomendas por cliente**
```{r fig.height=5, fig.width=7}

orders_per_customer <- facts_dims %>%
  group_by(CustomerKey) %>%
  summarise(Num_Orders = n_distinct(SalesOrderNumber))
orders_counts <- orders_per_customer %>%
  mutate(Num_Orders_Group = case_when(
    Num_Orders >= 4 ~ "4 ou mais",
    TRUE ~ as.character(Num_Orders)
  )) %>%
  group_by(Num_Orders_Group) %>%
  summarise(Num_Customers = n())
ggplot(orders_counts, aes(x = factor(Num_Orders_Group), y = Num_Customers)) +
  geom_segment(aes(xend = factor(Num_Orders_Group), yend = 0), color = "skyblue", size = 2) +
  geom_point(color = "blue", size = 3) +
  geom_text(aes(label = Num_Customers), vjust = -0.5, size = 3) +
  labs(x = "Número de Encomendas por Cliente", y = "Número de Clientes") +
  ggtitle("Número de Clientes por Número de Encomendas") +
  theme_minimal()

```


O gráfico mostra o número de clientes agrupados pelo número de encomendas que realizaram. A maioria dos clientes fez menos de 4 encomendas, com uma diminuição no número de clientes à medida que o número de encomendas aumenta. Isto pode indicar uma oportunidade de aumentar a fidelidade dos clientes que fazem menos encomendas, por meio de programas de fidelidade ou ofertas especiais.



## Logistica

###Gastos de envio por país

**Gastos com envio por país**
```{r fig.height=5, fig.width=7}
plot_bubble_chart <- function(data) {
    soma_portes_pais <- aggregate(Freight ~ Country, data = data, sum)
    soma_portes_pais$Country <- factor(soma_portes_pais$Country, levels = soma_portes_pais$Country[order(soma_portes_pais$Freight)])
    soma_portes_pais$Freight <- soma_portes_pais$Freight / 1000

    grafico_bolhas <- ggplot(soma_portes_pais, aes(x = Country, y = Freight, label = paste0("", format(round(Freight, 0), big.mark = ",")))) +
        geom_point(color = "dodgerblue", alpha = 0.7) +
        geom_text(vjust = -0.5, size = 3) +
        labs(
            title = "Gastos de envio em cada país",
            x = "País",
            y = "Total gasto (em milhares de USD)",
        ) +
        theme_minimal() +
        theme(axis.text.x = element_text(angle = 45, hjust = 1))
    print(grafico_bolhas)
}

plot_bubble_chart(facts_dims)

```


O gráfico ilustra o valor total de gastos com envio em cada país, destacando as discrepâncias nos custos de envio entre diferentes regiões. Países com valores mais elevados aparecem visualmente mais destacados, enquanto aqueles com custos menores são representados por pontos menores. Essa representação visual facilita a identificação dos países que mais contribuem para os custos totais de envio.




**Distribuição do inventário da empresa por categoria**
```{r fig.height=5, fig.width=7}

inventory_by_category <- facts_dims %>%
  group_by(Category) %>%
  summarise(Unique_Products = n_distinct(ProductKey))
inventory_by_category <- inventory_by_category %>%
  arrange(desc(Unique_Products))
ggplot(inventory_by_category, aes(x = reorder(Category, -Unique_Products), y = Unique_Products)) +
  geom_segment(aes(xend = reorder(Category, -Unique_Products), yend = 0), color = "skyblue", size = 2) +
  geom_point(color = "blue", size = 3) +
  geom_text(aes(label = Unique_Products), vjust = -0.5, size = 3) +
  labs(x = "Categoria", y = "Quantidade de Produtos ", title = "Inventário por Categoria") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```


O gráfico mostra a quantidade de produtos agrupados por categoria.



**Distribuição do inventário da empresa por subcategoria**
```{r fig.height=5, fig.width=7}
inventory_by_subcategory <- facts_dims %>%
    group_by(SubCategory) %>%
    summarise(Unique_Products = n_distinct(ProductKey))
inventory_by_subcategory <- inventory_by_subcategory %>%
    arrange(desc(Unique_Products))
colors <- c("firebrick", "skyblue", "darkgreen")
product_counts <- inventory_by_subcategory$Unique_Products
breaks <- quantile(product_counts, probs = c(0, 1/3, 2/3, 1))
inventory_by_subcategory$Color <- cut(product_counts, breaks = breaks, labels = colors, include.lowest = TRUE)
ggplot(inventory_by_subcategory, aes(y = reorder(SubCategory, Unique_Products), x = Unique_Products, fill = Color)) +
    geom_bar(stat = "identity") +
    labs(y = "Subcategoria", x = "Quantidade de Produtos", title = "Inventário por Subcategoria") +
    scale_fill_manual(values = unique(inventory_by_subcategory$Color)) +
    theme_minimal() +
    theme(axis.text.y = element_text(hjust = 0, size = 8))
```


O gráfico apresenta a distribuição da quantidade de produtos agrupados por subcategoria.




## Vendas

**Evolução das vendas ao longo dos anos**
```{r fig.height=5, fig.width=7}

vendas_por_ano <- aggregate(SalesAmount ~ CalendarYear, data = facts_dims, sum)

grafico_vendas <- ggplot(vendas_por_ano, aes(x = CalendarYear, y = SalesAmount)) +
    geom_line(color = "blue") +
    geom_point(color = "red", size = 3) +
    geom_text(aes(label = paste0("", round(SalesAmount / 1000000, 2), "")), vjust = -0.5, hjust = -0.2, size = 3) +
    labs(title = "Evolução de Vendas ao Longo dos Anos",
         x = "Ano",
         y = "Vendas Totais (em milhões de Dolars)") +
    scale_y_continuous(labels = scales::dollar_format(scale = 1e-6)) +
    theme_minimal()

print(grafico_vendas)
```

```
O gráfico mostra a evolução das vendas ao longo dos anos.
```

*+Evolução das vendas por trimestre**
```{r fig.height=5, fig.width=7}
sales_by_year_quarter <- facts_dims %>%
   group_by(CalendarYear, CalendarQuarter) %>%
    summarise(Total_Sales = sum(SalesAmount))

ggplot(sales_by_year_quarter, aes(x = paste(CalendarYear, "Q", CalendarQuarter), y = Total_Sales / 1000, group = 1)) +
    geom_line() +
    labs(x = "Ano e Trimestre", y = "Total de Vendas (em milhares)", title = "Evolução das Vendas de Trimestre em Trimestre") +
    scale_y_continuous(labels = scales::comma) +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```


O gráfico mostra a evolução das vendas trimestrais ao longo dos anos. Verifica-se um padrão de variação sazonal nas vendas, com alguns trimestres apresentando picos de vendas significativos. Fornece uma indicação clara do total de vendas em milhares de dólares para cada trimestre, permitindo uma análise fácil das tendências ao longo do tempo.



```{r fig.height=5, fig.width=7}
sales_by_country <- aggregate(SalesAmount ~ Country, data = facts_dims, FUN = sum)
sales_by_country <- sales_by_country[order(sales_by_country$SalesAmount, decreasing = TRUE), ]
ggplot(sales_by_country, aes(x = fct_reorder(Country, desc(SalesAmount)), y = SalesAmount / 1000000)) +
    geom_segment(aes(xend = Country, yend = 0), color = "skyblue") +  
    geom_point(color = "skyblue", size = 3) +  
    geom_text(aes(label = paste0(scales::comma(SalesAmount / 1000000))), vjust = -1, size = 3) +
    labs(title = "Vendas por País (2016-2019)",
         x = "País",
         y = "Total de Vendas (Milhões USD)") +
    scale_y_continuous(labels = scales::comma) +  
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1),
          axis.title = element_text(size = 10), 
          plot.title = element_text(size = 12))
```


Este gráfico mostra a distribuição das vendas totais por país durante o período de 2016 a 2019. Os países estão ordenados de acordo com o total de vendas, destacando aqueles com maiores volumes de vendas. Os valores das vendas estão expressos em milhões de dólares no eixo vertical, facilitando a compreensão dos montantes. Através deste gráfico, podemos identificar os principais países em termos de contribuição para o total de vendas da empresa ao longo destes anos.




**Valor médio de cada venda**
```{r fig.height=5, fig.width=7}

average_prices <- facts_dims %>%
  group_by(Country) %>%
  summarize(avg_price = mean(SalesAmount))
average_prices <- average_prices[order(average_prices$avg_price), ]
ggplot(average_prices, aes(x = reorder(Country, avg_price), y = avg_price)) +
  geom_segment(aes(xend = Country, yend = 0), color = "skyblue") +
  geom_point(size = 3, color = "#105ABD") +
  coord_flip() +
  labs(title = "Valor Médio de Cada Venda",  
       x = "País",  
       y = "Preço Médio (USD)") +
  annotate("text", x = average_prices$Country, y = average_prices$avg_price + 5,  
           label = round(average_prices$avg_price, 0), 
           color = "black", size = 3, hjust = -0.2)  

```


Este gráfico ilustra o preço médio de cada venda por país, o que permite uma comparação visual dos valores médios entre diferentes países. Encontra-se em ordem decrescente, desde o país com o maior valor médio de cada venda até ao país com menor valor.



**Os 5 produtos mais e menos vendidos da empresa**
```{r fig.height=5, fig.width=7}
sales_summary <- facts_dims %>%
  group_by(ProductName) %>%
  summarize(Num_Sales = n())
sales_summary <- sales_summary %>%
  arrange(desc(Num_Sales))
top_bottom_summary <- bind_rows(
  head(sales_summary, 5),
  tail(sales_summary, 5)
)
ggplot(top_bottom_summary, aes(x = reorder(ProductName, Num_Sales), y = Num_Sales)) +
  geom_segment(aes(xend = reorder(ProductName, Num_Sales), yend = 0), color = "#2E86C1", size = 1.5) + 
  geom_point(color = "#E74C3C", size = 3) +  
  geom_text(aes(label = Num_Sales), vjust = -0.5, color = "black", size = 3.5) +  
  coord_flip() +  
  labs(title = "Produtos Mais e Menos Vendidos",
       x = "Produto",
       y = "Unidades Vendidas") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))  
```

Este gráfico apresenta uma análise dos produtos mais e menos vendidos. Estes encontram-se ordenados com base no número de unidades vendidas, sendo o produto mais vendido "Water Bottle" e o menos vendido "Mountain-100 Silver,48". Fornecendo uma visão clara da distribuição das vendas entre os diferentes produtos.



## Contabilidade

**Total de impostos pagos em cada país**
```{r fig.height=5, fig.width=7}
tax_by_country <- aggregate(TaxAmt ~ Country, data = facts_dims, FUN = sum)
tax_by_country$TaxAmt_million <- round(tax_by_country$TaxAmt / 1000, 0)
ggplot(tax_by_country, aes(x = "", y = TaxAmt, fill = Country, label = TaxAmt_million)) +
    geom_bar(stat = "identity", width = 1) +
    geom_text(aes(label = paste0(round(TaxAmt_million, 2), "")), position = position_stack(vjust = 0.5)) +
    coord_polar(theta = "y") +
    theme_void() +
    theme(legend.position = "right") +
    scale_fill_brewer(palette = "Set3") + 
    ggtitle("Soma dos Impostos por País (em milhões de USD)") +
    labs(y = "Impostos pagos (milhões de USD)") +  
    scale_y_continuous(labels = comma) +  
    theme(legend.position = "right")
```


Este gráfico apresenta a soma dos impostos por país em milhões de dólares. Cada cor do gráfico representa um país, sendo o tamanho proporcional ao montante total de impostos pagos. A sua visualização oferece uma visão geral da contribuição de cada país para os impostos totais, destacando aqueles que contribuem com as maiores e menores quantidades.




**Os cinco produtos que trazem mais lucro á empresa**
```{r fig.height=5, fig.width=7}
facts_dims$Profit <- facts_dims$SalesAmount - facts_dims$ProductStandardCost
profit_by_product <- facts_dims %>%
    group_by(ProductKey, ProductName) %>%
    summarise(TotalProfit = sum(Profit, na.rm = TRUE))
top_profit_products <- profit_by_product %>%
    arrange(desc(TotalProfit)) %>%
    head(5)
bottom_profit_products <- profit_by_product %>%
    arrange(TotalProfit) %>%
    head(5)
ggplot(top_profit_products, aes(x = reorder(ProductName, TotalProfit), y = TotalProfit/1000)) +
    geom_segment(aes(xend = reorder(ProductName, TotalProfit), yend = 0), color = "skyblue", size = 2) +
    geom_point(color = "blue", size = 3) +
    geom_text(aes(label = scales::dollar(TotalProfit)), vjust = -0.5, size = 3) +
    labs(x = "Produto", y = "Lucro Total (em milhares de USD)", title = "Cinco Produtos com Mais Lucro") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

Este gráfico mostra os cinco produtos com o maior lucro total. Os produtos estão ordenados do menor para o maior lucro. Esta visualização permite identificar rapidamente quais produtos contribuem mais para o lucro geral da empresa, fornecendo insights valiosos para tomadas de decisão estratégicas.



**Os cinco produtos que trazem menos lucro á empresa**
```{r fig.height=5, fig.width=7}
ggplot(bottom_profit_products, aes(x = reorder(ProductName, TotalProfit), y = TotalProfit/1000)) +
    geom_segment(aes(xend = reorder(ProductName, TotalProfit), yend = 0), color = "salmon", size = 2) +
    geom_point(color = "red", size = 3) +
    geom_text(aes(label = scales::dollar(TotalProfit)), vjust = -0.5, size = 3) +
    labs(x = "Produto", y = "Lucro Total (em milhares de USD)", title = "Cinco Produtos com Menos Lucro") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

Esse gráfico apresenta os cinco produtos com o menor lucro total. Os produtos estão ordenados do menor para o maior lucro. A sua análise ajuda a identificar quais produtos contribuem menos para o lucro global da empresa, fornecendo insights importantes para possíveis ajustes.


# Apêndice

## 1. Dicionário do *data mart*

### dimensão `calendar` : df [1,279 x 11]

+ __ID__ : chave primária (_numeric_)
+ __Date__ : data (dd/mm/yyyy) da transacção (_date_)
+ __DayNumberOfWeek__ : dia da semana (_num_)
+ __DayName__ : nome do dia da semana (_chr_)
+ __MonthName__ : nome do mês (inglês) (_chr_)
+ __MonthNumberOfYear__ : número do mês (_num_)
+ __CalendarQuarter__: trimestre (_num_)
+ __CalendarYear__: ano (_num_)
+ __DayNumberOfYear__: número do dia do ano (_num_)
+ __DayNumberOfMonth__: número do mês (_num_)
+ __DayName__: nome do dia (_chr_)
+ __WeekNumberOfYear__: número da semana do ano (_num_)


### dados `calendar`

```{r calendar_data, echo=FALSE}
load("calendar.Rda") # deve ser carregado no início
DT::datatable(head(calendar, 100), 
              options = list(pageLength = 5), 
              rownames = FALSE, 
              class = 'cell-border stripe')
```



### dimensão `customers`

- **CustomerKey** : ID do Cliente (_num_)
- **GeographyKey** : ID da região (_num_)
- **Name** : Nome do Cliente (_chr_)
- **BirthDate** : Data de Nascimento do Cliente (_date_)
- **MaritalStatus** : Estado Civil (_chr_)
- **Gender** : Genero (_chr_)
- **YearlyIncome** : Rendimento Anual (_num_)
- **NumberChildrenAtHome** : Numero de Criancas em Casa (_chr_)
- **Occupation** : Ocupacao Profissional (_chr_)
- **HouseOwnerFlag** : ???
- **NumberCarsOwned** : Numero de Carros (_num_)
- **AddressLine** : Endereco do Cliente (_chr_)
- **Phone** : Numero de Telemovel (_num_)
- **DateFirstPurchase** : Data da Primeira Compra (_date_)

### dados `customers`

```{r customers, echo=FALSE}
load("customers.Rda") # deve ser carregado no início
DT::datatable(head(customers, 25), 
              options = list(pageLength = 5), 
              rownames = FALSE, 
              class = 'cell-border stripe')

```

### dimensão `Vendas`

- **OrderDate**: Data da Compra (*date*)
- **OrderDateKey**: Chave da Data da Compra (*num*)
- **ProductKey**: Chave do Produto (*num*)
- **CustomerKey**: Chave do Cliente (*num*)
- **SalesTerritoryKey**: Chave do Territorio de Venda (*num*)
- **SalesOrderNumber**: Numero da Order (*num*)
- **SalesOrderLineNumber**: Numero de Artigos na order (*num*)
- **OrderQuantity**: Quantidade de Artigos (*num*)
- **UnitPrice**: Preco por Unidade (USD) (*num*)
- **ProductStandardCost**: Custo Standard do Produto (USD) (*num*)
- **SalesAmount**: Valor da Order (USD) (*num*)
- **TaxAmt**: Valor do Imposto (USD) (*num*)
- **Freight**: Custo de Envio (*num*)
- **RegionMonthID**: ID da Regiao e do Mes (*num* and *chr*)

### dados `Vendas`

```{r factsSales, echo=FALSE}
load("factSales.Rda") # deve ser carregado no início
DT::datatable(head(factSales, 25), 
              options = list(pageLength = 5), 
              rownames = FALSE, 
              class = 'cell-border stripe')

```

### dimensão `Products`

- **ProductKey** : Chave do Produto (*num*)
- **ProductSubcategoryKey** : Chave da Subcategoria do Producto (_num_)
- **ProductName** : Nome do Produto (_chr_
- **StandardCost** : Custo Standard (USD) (_num_)
- **Color** : Cor do Produto (_chr_)
- **SafetyStockLevel** : Stock de Seguranca (_num_)
- **ListPrice** : Preco de Venda (USD) (*num*)
- **Size** : Tamanho (*chr*)
- **DaystoManufacture** : Dias Necessários para produzir (_num_)
- **DealerPrice** : Preco de Venda ao Retalhista (USD) (*num*)
- **Class** :
- **ModelName** : Nome do Modelo (_chr_)
- **Description** : Descricao (_chr_)
- **Status** :
- **SubCategory** : Subcategoria do Produto (_chr_)
- **StartDate** : Data de Inicio de Venda (*date*)
- *EndDate** : Data de Fim de Venda (*date*)

###dados `Products`

```{r products, echo=FALSE}
load("products.Rda") # deve ser carregado no início
DT::datatable(head(products, 25), 
              options = list(pageLength = 5), 
              rownames = FALSE, 
              class = 'cell-border stripe')
```


###dimensão `ProductCategory`

- **ProductCategoryKey** : Chave da Categoria do Producto (_num_)
- **EnglishProductCategoryName** : Categoria do Produto em Ingles (_chr_)
- **SpanishProductCategoryName** : Categoria do Produto em Espanhol (_chr_)
- **FrenchProductCategoryName** : Categoria do Produto em Frances (_chr_)

###dados `ProductCategory`

```{r productCategory, echo=FALSE}
load("productCategory.Rda") # deve ser carregado no início
DT::datatable(head(productCategory, 25), 
              options = list(pageLength = 5), 
              rownames = FALSE, 
              class = 'cell-border stripe')
```

### dimensão `ProductSubCategory`

- **ProductCategoryKey** : Chave da Categoria do Producto (_num_)
- **ProductSubcategoryKey** : Chave da Subcategoria do Producto (_num_)
- **EnglishProductSubcategoryName** : SubCategoria do Produto em Ingles (_chr_)
- **SpanishProductSubcategoryName** : SubCategoria do Produto em Espanhol (_chr_)
- **FrenchProductSubcategoryName** : SubCategoria do Produto em Frances (_chr_)

###dados `ProductSubCategory`

```{r productSubcategory, echo=FALSE}
load("productSubCategory.Rda") # deve ser carregado no início
DT::datatable(head(productSubCategory, 25), 
              options = list(pageLength = 5), 
              rownames = FALSE, 
              class = 'cell-border stripe')
```

### dimensão `Territory`

- **TerritoryKey** : Chave do Territorio (chr)
- **Region** : Regiao (chr)
- **Country** : Pais (chr)
- **Group** : Continente (chr)

###dados `Territory`

```{r territory, echo=FALSE}
load("territory.Rda") # deve ser carregado no início
DT::datatable(head(territory, 25), 
              options = list(pageLength = 5), 
              rownames = FALSE, 
              class = 'cell-border stripe')
